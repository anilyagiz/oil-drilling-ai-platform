name: Monitoring and Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/monitoring.yml'

jobs:
  dependency-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Check for dependency updates
      run: |
        echo "Checking for outdated dependencies..."
        
        # Check root dependencies
        echo "=== Root Dependencies ==="
        npm outdated || echo "No outdated root dependencies found"
        
        # Check client dependencies
        echo "=== Client Dependencies ==="
        cd client && npm outdated || echo "No outdated client dependencies found"
        cd ..
        
        # Check server dependencies
        echo "=== Server Dependencies ==="
        cd server && npm outdated || echo "No outdated server dependencies found"
    
    - name: Security audit all packages
      run: |
        echo "Running security audits..."
        
        # Audit root
        echo "=== Root Security Audit ==="
        npm audit --audit-level moderate || echo "Root security audit completed"
        
        # Audit client
        echo "=== Client Security Audit ==="
        cd client && npm audit --audit-level moderate || echo "Client security audit completed"
        cd ..
        
        # Audit server
        echo "=== Server Security Audit ==="
        cd server && npm audit --audit-level moderate || echo "Server security audit completed"
        cd ..
    
    - name: Generate dependency report
      run: |
        echo "# Dependency Report - $(date)" > dependency-report.md
        echo "" >> dependency-report.md
        echo "## Outdated Packages" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "### Root" >> dependency-report.md
        npm outdated --json > root-outdated.json 2>/dev/null || echo "{}" > root-outdated.json
        echo '```json' >> dependency-report.md
        cat root-outdated.json >> dependency-report.md
        echo '```' >> dependency-report.md
        echo "" >> dependency-report.md
        
        echo "### Client" >> dependency-report.md
        cd client && npm outdated --json > ../client-outdated.json 2>/dev/null || echo "{}" > ../client-outdated.json
        cd ..
        echo '```json' >> dependency-report.md
        cat client-outdated.json >> dependency-report.md
        echo '```' >> dependency-report.md
        echo "" >> dependency-report.md
        
        echo "### Server" >> dependency-report.md
        cd server && npm outdated --json > ../server-outdated.json 2>/dev/null || echo "{}" > ../server-outdated.json
        cd ..
        echo '```json' >> dependency-report.md
        cat server-outdated.json >> dependency-report.md
        echo '```' >> dependency-report.md
        
        echo "Dependency report generated"

  performance-monitoring:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "Installing root dependencies..."
        npm ci
        echo "Installing client dependencies..."
        cd client && npm ci
        cd ..
        echo "Installing server dependencies..."
        cd server && npm ci
        cd ..
        echo "Dependencies installed successfully"
    - name: Build and performance test
      run: |
        set -euo pipefail
        mkdir -p tmp
        trap 'echo "\n--- Performance server log ---"; cat tmp/perf-server.log || true' ERR

        echo "Building client for performance testing..."
        cd client
        npm run build
        cd ..

        echo "Starting server for performance testing..."
        cd server
        npm start > ../tmp/perf-server.log 2>&1 &
        SERVER_PID=$!
        echo "Server started with PID: $SERVER_PID"
        echo $SERVER_PID > ../tmp/perf-server.pid
        cd ..

        echo "Waiting for server to become ready..."
        READY=false
        for attempt in {1..12}; do
          if curl -sSf http://localhost:5000/api/health > /dev/null 2>&1; then
            echo "Server is responding (attempt $attempt)"
            READY=true
            break
          fi

          if ! ps -p $(cat tmp/perf-server.pid) > /dev/null; then
            echo "Server process exited prematurely"
            cat tmp/perf-server.log || true
            exit 1
          fi

          echo "Server not ready yet (attempt $attempt), retrying in 5s..."
          sleep 5
        done

        if [ "$READY" = false ]; then
          echo "Server did not become ready in time"
          cat tmp/perf-server.log || true
          exit 1
        fi

        echo "Running performance tests..."
        echo "=== API Response Time Tests ==="
        echo "Testing /api/health response time..."
        curl -fsS -o /dev/null -w "Status: %{http_code}\n" http://localhost:5000/api/health || { echo "Health endpoint test failed"; exit 1; }

        echo "Testing /api/wells response time..."
        curl -fsS -o /dev/null -w "Status: %{http_code}\n" http://localhost:5000/api/wells || { echo "Wells endpoint test failed"; exit 1; }

        echo "Testing /api/chat/history response time..."
        curl -fsS -o /dev/null -w "Status: %{http_code}\n" http://localhost:5000/api/chat/history || { echo "Chat history endpoint test failed"; exit 1; }

        echo "Performance tests completed"

        echo "\n--- Performance server log (tail) ---"
        tail -n 100 tmp/perf-server.log || true

        echo "Cleaning up server process..."
        kill $(cat tmp/perf-server.pid) || true
        wait $(cat tmp/perf-server.pid) 2>/dev/null || true
        rm -f tmp/perf-server.pid
        echo "Cleanup completed"
    
    - name: Error tracking and logging test
      run: |
        set -euo pipefail
        mkdir -p tmp
        trap 'echo "\n--- Error-tracking server log ---"; cat tmp/error-server.log || true' ERR

        echo "Testing error handling and logging..."
        cd server

        echo "Starting server..."
        npm start > ../tmp/error-server.log 2>&1 &
        SERVER_PID=$!
        echo "Server started with PID: $SERVER_PID"
        echo $SERVER_PID > ../tmp/error-server.pid
        cd ..

        echo "Waiting for server to become ready..."
        READY=false
        for attempt in {1..12}; do
          if curl -sSf http://localhost:5000/api/health > /dev/null 2>&1; then
            echo "Server is responding (attempt $attempt)"
            READY=true
            break
          fi

          if ! ps -p $(cat tmp/error-server.pid) > /dev/null; then
            echo "Server process exited prematurely"
            cat tmp/error-server.log || true
            exit 1
          fi

          echo "Server not ready yet (attempt $attempt), retrying in 5s..."
          sleep 5
        done

        if [ "$READY" = false ]; then
          echo "Server did not become ready in time"
          cat tmp/error-server.log || true
          exit 1
        fi

        echo "=== Error Handling Tests ==="

        echo "Testing invalid file upload error handling..."
        UPLOAD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/upload \
          -F "file=@README.md")
        if [ "$UPLOAD_STATUS" -ne 400 ]; then
          echo "Expected 400 for invalid file upload, got $UPLOAD_STATUS"
          exit 1
        fi

        echo "Testing invalid chat request error handling..."
        CHAT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/chat \
          -H "Content-Type: application/json" \
          -d '{}')
        if [ "$CHAT_STATUS" -ne 400 ]; then
          echo "Expected 400 for invalid chat request, got $CHAT_STATUS"
          exit 1
        fi

        echo "Testing non-existent well error handling..."
        WELL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/wells/99999/data)
        if [ "$WELL_STATUS" -ne 404 ]; then
          echo "Expected 404 for non-existent well data, got $WELL_STATUS"
          exit 1
        fi

        echo "Error handling tests completed"

        echo "\n--- Error-tracking server log (tail) ---"
        tail -n 100 tmp/error-server.log || true

        echo "Cleaning up server process..."
        kill $(cat tmp/error-server.pid) || true
        wait $(cat tmp/error-server.pid) 2>/dev/null || true
        rm -f tmp/error-server.pid
        echo "Cleanup completed"
    
    - name: Archive reports
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-reports
        path: |
          health-report.md
          dependency-report.md
        retention-days: 30

  automated-maintenance:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Only run on scheduled triggers
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Automated maintenance tasks
      run: |
        echo "Running automated maintenance tasks..."
        
        # Clean up old log files (if any)
        echo "Cleaning up temporary files..."
        find . -name "*.log" -mtime +7 -delete 2>/dev/null || true
        find . -name "*.tmp" -mtime +1 -delete 2>/dev/null || true
        
        # Check disk usage
        echo "Checking disk usage..."
        df -h
        
        # Check for large files
        echo "Checking for large files..."
        find . -size +10M -type f -not -path "./node_modules/*" -not -path "./.git/*" 2>/dev/null || echo "No large files found"
        
        echo "Automated maintenance completed"
    
    - name: Database maintenance
      run: |
        echo "Running database maintenance..."
        cd server
        
        # Install dependencies
        echo "Installing server dependencies..."
        npm ci
        
        # Start server briefly to trigger any migrations
        echo "Starting server briefly to trigger migrations..."
        timeout 30s npm start || echo "Server started and stopped for migration check"
        
        # Check database size
        echo "Checking for database file..."
        if [ -f "well_data.db" ]; then
          echo "Database size:"
          ls -lh well_data.db
        else
          echo "Database file not found"
        fi
        
        echo "Database maintenance completed"